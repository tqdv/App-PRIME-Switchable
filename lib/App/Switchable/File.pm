package App::Switchable::File;

use Carp;
use JSON::PP;

require Exporter;
our @ISA = qw<Exporter>;


=head1 NAME

App::Switchable::File

=head1 SYNOPSIS

 # In App::Switchable
 require App::Switchable::File;
 our @ISA = qw< App::Switchable::File >;
 
 $self->write_aliases;

=head1 DESCRIPTION

This module handles file creation, edition, and parsing. Configuration files are handles by L<App::Switchable::Config>.

=cut

=head1 METHODS

=head2 $app->write_aliases

Write the aliases from the config to the filesystem

=cut

sub write_aliases {
	my $self = shift;
	
	my $string;
	$string .= "# Generated by switchable, modifications will be overwritten\n";
	$string .= "# Generated from: "
		.JSON::PP->new->encode($self->config->{alias})
		."\n"; # Used for telling the user what commands to unalias
	
	$string .= "\n";
	foreach my $alias ($self->config->{alias}->@*) {
		$alias =~ s/'/'\\''/g;
		$string .= qq(alias '$alias'="DRI_PRIME=1 $alias"\n);
	}
	$string .= "# End of file";
	
	$self->aliases_file->touchpath or croak "Could not create aliases file at ".$self->aliases_file;
	$self->aliases_file->spew($string);
}

=head2 $app->read_old_aliases

Reads the C<Generated from> line in the aliases file and returns the parsed JSON

=cut

sub read_old_aliases {
	my $self = shift;
	
	my ($found_alias, $old_aliases);
	if ($self->aliases_file->exists) {
		my ($json) = map
			{ /^# Generated from: (.*)$/; $1 // () }
			$self->aliases_file->lines({chomp => 1});
		
		if ($json) {
			eval {
				$old_aliases = decode_json $json;
				$found_alias = 1;
				1;
			} or carp "Could not parse old aliases. (Don't modify the aliases file)";
		}
	}
	
	return ($found_alias, $old_aliases);
}

1;
